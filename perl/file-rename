#!/usr/bin/env perl

=head1 NAME

file-rename - rename multiple files

=head1 SYNOPSIS

  file-rename [OPTIONS] [-e|-E CODE]*|CODE [FILES]

=head1 DESCRIPTION

C<file-rename> renames the filenames supplied according to the rule
specified as the first argument. The perlexpr argument is a Perl
expression which is expected to modify the $_ string in Perl for at least
some of the filenames specified. If a given filename is not modified
by the expression, it will not be renamed. If no filenames are given on
the command line, filenames will be read via standard input.

=head1 OPTIONS

=over 8

=item B<-h>, B<--help>

Outputs this help page.

=item B<-e> I<EXPRESSION>, B<-E> I<EXPRESSION>, B<--expr>=I<EXPRESSION>

The code to be executed on filenames.

=item B<-v>, B<--verbose>

Be verbose.

=item B<-n>, B<--dry-run>

Do nothing but print what can be done.

=item B<-c>, B<--copy>

Copy instead of move.

=item B<-f>, B<--force>

Overwrite existing files.

=item B<-N>, B<--filename-only>

Do not rename directories: only rename filename component of path.

=item B<-z>, B<-0>, B<--null>

Treat the input as a set of lines terminated by a zero byte C<\0>,
instead of a newline.

=item B<--rotate>=I<ROTATE-MODE>

Rename files cyclically:

=over 8

=item I<left>

Rename files rotating names left: C<S<< f1 <- f2 <- ... <- fn <- f1 >>>.

=item I<right>

Rename files rotating names right: C<S<< f1 -> f2 -> ... -> fn -> f1 >>>.

=item I<swap>

Rename files by swapping the closest names: C<S<< f1 <-> f2 f3 <-> f4 ... >>>.

=item I<flip>

Rename files by swapping the farthest names: C<S<< f1 <-> fn f2 <-> fn-1 ... >>>.

=back

=item B<-L>

Synonym for B<--rotate>=I<left>.

=item B<-R>

Synonym for B<--rotate>=I<right>.

=item B<-S>

Synonym for B<--rotate>=I<swap>.

=item B<-F>

Synonym for B<--rotate>=I<flip>.

=back

=head1 SEE ALSO

mv(1)

cp(1)

perldoc -f rename

perldoc File::Copy

L<https://metacpan.org/pod/rename>

L<https://metacpan.org/pod/App::RenameUtils>

=head1 AUTHORS

This work is attempt to rethink the already existing script, rework the
code, extend (if it's possible) and make its usage more convenient.

Larry Wall

Robin Barker

Ildar Shaimordanov

=head1 COPYRIGHT

Copyright by Larry Wall

Copyright 2018 by Robin Barker

Copyright 2019 by Ildar Shaimordanov

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl itself.

=cut

# =========================================================================

use strict;
use warnings;

use Getopt::Long qw(:config no_ignore_case bundling);
use Pod::Usage;

use File::Copy;

# =========================================================================

my $verbose;
my $dry_run;
my $force;
my $action = "move";
my $filename_only;
my $null;
my $die_on_error;

my @expr;

my $rotate;

exit 1 unless GetOptions(
	"h|help"		=> sub { pod2usage({ -verbose => 2, -noperldoc => 1 }); },

	"v|verbose"		=> \$verbose,
	"n|dry-run"		=> sub { $dry_run = $verbose = 1; },
	"c|copy"		=> sub { $action = "copy"; },
	"f|force"		=> \$force,
	"N|filename-only"	=> \$filename_only,
	"z|0|null"		=> \$null,

	"e|E|expr=s@"		=> \@expr,

	"L"		=> sub { $rotate = "left"; },
	"R"		=> sub { $rotate = "right"; },
	"S"		=> sub { $rotate = "swap"; },
	"F"		=> sub { $rotate = "flip"; },
	"rotate=s"	=> sub {
		$rotate = $_[1];
		$rotate =~ /^(left|right|swap|flip)$/ or die "Bad rotate mode: $rotate\n";
	},
);

# =========================================================================

sub input {
	unless ( -t 0 ) {
		warn "Reading from <stdin>\n" if $verbose;
		local $/ = "\0" if $null;
		chop( @ARGV = <STDIN> );
	}
	@ARGV;
}

sub act {
	my ( $x, $y ) = @_;

	$verbose and warn "$action '$x' '$y'\n";

	return if $dry_run;

	no strict 'refs';
	$action->($x, $y) or do {
		warn "Cannot $action '$x' '$y': $!\n";
		exit 255 if $die_on_error;
	}
}

# =========================================================================

$rotate and do {
	input;

	# Make sure the files exist
	for ( @ARGV ) {
		die "'$_' not found\n" unless -e $_;
	}

	# Crate a temp filename that doesn't exist
	my $tmp;
	while ( 1 ) {
		$tmp = sprintf "rotate-tmp-%d", rand() * 1_000_000;
		last unless -e $tmp;
	}

	# Prepare replacement list
	# rotate left  : tmp f1 f2 ... fn-1 fn tmp
	# rotate right : tmp fn fn-1 ... f2 f1 tmp
	# swap files   : tmp f1 f2 tmp ... fn-1 fn tmp
	# flip files   : tmp fn f1 tmp fn-1 f2 tmp ...
	my @files;
	if ( $rotate eq "left" ) {
		@files = @ARGV;
	} elsif ( $rotate eq "right" ) {
		@files = reverse @ARGV;
	} elsif ( $rotate eq "swap" ) {
		die "Even number of files required\n" if @ARGV % 2;

		for ( my $i = 1; $i < @ARGV; $i += 2 ) {
			push @files, $ARGV[$i - 1], $ARGV[$i], $tmp;
		}

		# Remove an extra name
		pop @files;
	} elsif ( $rotate eq "flip" ) {
		die "Even number of files required\n" if @ARGV % 2;

		for ( my $i = 0; $i < @ARGV / 2; $i++ ) {
			push @files, $ARGV[$#ARGV - $i], $ARGV[$i], $tmp;
		}

		# Remove an extra name
		pop @files;
	}
	unshift @files, $tmp;
	push @files, $tmp;

	$action = "rename";
	$die_on_error = 1;

	# Rename files accordingly the mode
	for ( my $i = 1; $i < @files; $i++ ) {
		my $x = $files[$i];
		my $y = $files[$i - 1];

		act $x, $y;
	}
	exit;
};

# =========================================================================

push @expr, shift if ! @expr && @ARGV;

my $code = join ";", @expr or pod2usage;

my $eval = eval sprintf "sub {\n#line 1\n%s\n}", $code or die $@;

my $evaluate = ! $filename_only ? $eval : sub {
	require File::Spec;
	my ( $vol, $dir, $file ) = File::Spec->splitpath($_);
	$eval->() for ( $file );
	$_ = File::Spec->catpath($vol, $dir, $file);
};

# =========================================================================

for ( input ) {
	my $old = $_;

	$evaluate->();

	next if $old eq $_;

	if ( -e $_ && ! $force ) {
		warn "'$old' not renamed: '$_' already exists\n";
		next;
	}

	act $old, $_;
}

# =========================================================================

# EOF
